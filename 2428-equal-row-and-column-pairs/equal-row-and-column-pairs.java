class Solution {
  public int equalPairs(int[][] grid) {
    final int n = grid.length;
    int ans = 0;

    for (int i = 0; i < n; ++i)
      for (int j = 0; j < n; ++j) {
        int k = 0;
        for (; k < n; ++k)
    //  System.out.println("i: " + i + ", j: " + j + ", k: " + k + ", grid[i][k]: " + grid[i][k] + ", grid[k][j]: " + grid[k][j]);
          if (grid[i][k] != grid[k][j])
            break;
        if (k == n) // R[i] == C[j]
          ++ans;
      }

    return ans;
  }
}
// Input: grid = [[3,2,1],[1,7,6],[2,7,7]]
// Output: 1
// | i | k | j | ans | n | grid[i][k] | grid[k][j] |
// |---|---|---|-----|---|-----------|-----------|
// | 0 | 0 | 0 |  1  | 3 |    3      |     3     |
// | 0 | 0 | 1 |  0  | 3 |    3      |     2     |
// | 0 | 0 | 2 |  0  | 3 |    3      |     1     |
// | 0 | 1 | 0 |  0  | 3 |    2      |     3     |
// | 0 | 1 | 1 |  1  | 3 |    2      |     7     |
// | 0 | 1 | 2 |  0  | 3 |    2      |     6     |
// | 0 | 2 | 0 |  0  | 3 |    1      |     3     |
// | 0 | 2 | 1 |  0  | 3 |    1      |     7     |
// | 0 | 2 | 2 |  1  | 3 |    1      |     6     |
// | 1 | 0 | 0 |  0  | 3 |    3      |     3     |
// | 1 | 0 | 1 |  0  | 3 |    3      |     2     |
// | 1 | 0 | 2 |  0  | 3 |    3      |     1     |
// | 1 | 1 | 0 |  1  | 3 |    7      |     3     |
// | 1 | 1 | 1 |  1  | 3 |    7      |     7     |
// | 1 | 1 | 2 |  0  | 3 |    7      |     6     |
// | 1 | 2 | 0 |  0  | 3 |    6      |     3     |
// | 1 | 2 | 1 |  0  | 3 |    6      |     7     |
// | 1 | 2 | 2 |  1  | 3 |    6      |     6     |
// | 2 | 0 | 0 |  0  | 3 |    3      |     3     |
// | 2 | 0 | 1 |  0  | 3 |    3      |     2     |
// | 2 | 0 | 2 |  1  | 3 |    3      |     1     |
// | 2 | 1 | 0 |  0  | 3 |    7      |     3     |
// | 2 | 1 | 1 |  1  | 3 |    7      |     7     |
// | 2 | 1 | 2 |  1  | 3 |    7      |     6     |
// | 2 | 2 | 0 |  1  | 3 |    6      |     3     |
// | 2 | 2 | 1 |  1  | 3 |    6      |     7     |
// | 2 | 2 | 2 |  1  | 3 |    6      |     6     |

